{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      comments: [],\n      postDetail: {},\n      content: '',\n      isCommentEmpty: false\n    };\n  },\n  created() {\n    const postID = this.$route.params.postID;\n    axios.get(`http://localhost:3001/api/getPostDetail/${postID}`).then(response => {\n      this.postDetail = response.data;\n    }).catch(error => {\n      console.error('Error fetching post details:', error);\n    });\n    axios.get(`http://localhost:3001/api/getComments/${postID}`).then(response => {\n      this.comments = response.data;\n    }).catch(error => {\n      console.error('Error fetching comments:', error);\n    });\n  },\n  methods: {\n    async addComment() {\n      const postID = this.postDetail.postID;\n      const loggedInUser = JSON.parse(localStorage.getItem('user'));\n      const userID = loggedInUser.id;\n      try {\n        const response = await axios.post('http://localhost:3001/api/addComment', {\n          postID,\n          userID,\n          content: this.content // 변경된 부분\n        });\n\n        if (response.status === 201) {\n          alert('댓글이 성공적으로 추가되었습니다.');\n          this.content = ''; // 댓글 내용 초기화\n        }\n      } catch (error) {\n        console.error('댓글 추가 중 오류 발생:', error);\n        alert('댓글을 추가하는데 실패했습니다.');\n      }\n    },\n    // 내 정보 페이지로 이동\n    goToMyInfoPage() {\n      this.$router.push(\"/MyInfoPage\");\n    },\n    goToLoginPage() {\n      this.$router.push(\"/\");\n    },\n    // 매칭 신청 페이지로 이동\n    goToMatchingApplyPage() {\n      this.$router.push(\"/MatchingApplyPage\");\n    },\n    // 매칭 현황 페이지로 이동\n    goToMatchingStatusPage() {\n      this.$router.push(\"/MatchingApplyDetailPage\");\n    },\n    goToMainPage() {\n      this.$router.push(\"/MainPage\");\n    },\n    goToNoticePage() {\n      this.$router.push(\"/NoticePage\");\n    }\n  }\n};","map":{"version":3,"names":["axios","data","comments","postDetail","content","isCommentEmpty","created","postID","$route","params","get","then","response","catch","error","console","methods","addComment","loggedInUser","JSON","parse","localStorage","getItem","userID","id","post","status","alert","goToMyInfoPage","$router","push","goToLoginPage","goToMatchingApplyPage","goToMatchingStatusPage","goToMainPage","goToNoticePage"],"sources":["C:\\Project-Matching-Us\\frontend\\project\\src\\views\\MatchingBoardDetailPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- 네비게이션 바 -->\r\n    <nav class=\"navbar bg-body-tertiary fixed-top\">\r\n      <div class=\"container-fluid\">\r\n        <div class=\"navbar_logo\">\r\n          <!-- 매칭어스 로고 이미지 -->\r\n          <span class=\"MatchingUs\">\r\n            <img  @click=\"goToMainPage\" src=\"/image/logo.png\" class=\"img\"  alt=\"매칭어스 로고\" />\r\n          </span>\r\n        </div>\r\n        <div class=\"navbar_right\">\r\n          <div class=\"navbar_welcome\">\r\n            <!-- 사용자 이름과 환영 메시지 -->\r\n            <div class=\"welcome\">환영합니다, <strong class=\"name\">{{ user.name }}</strong>님! <i class=\"fa-regular fa-face-smile\"></i></div>\r\n          </div>\r\n          <!-- 로그아웃 버튼 -->\r\n          <button @click=\"goToLoginPage\" class=\"btn btn-outline-success\" style=\"color: #9370DB; text-decoration: none;\">\r\n            <i  class=\"fa-solid fa-right-from-bracket\"></i> LOG OUT!\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n\r\n    <!-- 사이드 메뉴 바 -->\r\n    <nav class=\"menuBar fixed-top\">\r\n      <div class=\"side_nav\">\r\n        <ul class=\"basicMenu\">\r\n          <li>\r\n            <!-- 내 정보 페이지로 이동 버튼 -->\r\n            <button @click=\"goToMyInfoPage\"><p style=\"text-decoration: none; color: white;\">내 정보</p></button>\r\n          </li>\r\n          <li>\r\n            <!-- 매칭 신청 페이지로 이동 버튼 -->\r\n            <button @click=\"goToMatchingApplyPage\"><p style=\"text-decoration: none; color: white;\">매칭 신청</p></button>\r\n          </li>\r\n          <li>\r\n            <!-- 매칭 현황 페이지로 이동 버튼 -->\r\n            <button @click=\"goToMatchingStatusPage\"><p style=\"text-decoration: none; color: white;\">매칭 현황</p></button>\r\n          </li>\r\n          <li>\r\n                    <!-- 공지사항 페이지로 이동 -->\r\n                    <button @click=\"goToNoticePage\"><p style=\"text-decoration: none; color: white;\">공지사항</p></button>\r\n                </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n    </div>\r\n    \r\n    <div class=\"content\">\r\n  <section id=\"postDetailContainer\">\r\n      <div class=\"post-it\" :class=\"{ male: postDetail.gender === 'male', female: postDetail.gender === 'female' }\">\r\n    <h3>{{ postDetail.matchingTitle }}</h3>\r\n    <p>인원: {{ postDetail.matchingType }}</p>\r\n    <p>학과: {{ postDetail.department }}</p>\r\n    <p>내용: {{ postDetail.matchingContent }}</p>\r\n</div>\r\n          <div class=\"comments-section\">\r\n        <!-- <h4>댓글</h4> -->\r\n        <div class=\"comments-list\">\r\n          <ul class=\"comment-ul\">\r\n  <li v-for=\"comment in comments\" :key=\"comment.commentID\">\r\n    {{ comment.content }}\r\n  </li>\r\n</ul>\r\n        </div>\r\n\r\n        <div class=\"add-comment\">\r\n        <textarea class=\"textarea1\" v-model=\"content\" placeholder=\"댓글을 작성해주세요.\"></textarea>\r\n        <button class=\"comment-button\" @click=\"addComment\">댓글 추가</button>\r\n    </div>\r\n\r\n        <p class=\"warning-text\" v-if=\"isCommentEmpty\">추가할 내용이 없습니다.</p>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport axios from 'axios';\r\nexport default {\r\n  data() {\r\n  return {\r\n    comments: [],\r\n    postDetail: {},\r\n    content: '',\r\n    isCommentEmpty: false\r\n  };\r\n},\r\ncreated() {\r\n    const postID = this.$route.params.postID;\r\n    axios.get(`http://localhost:3001/api/getPostDetail/${postID}`)\r\n    .then(response => {\r\n        this.postDetail = response.data;\r\n    })\r\n    .catch(error => {\r\n        console.error('Error fetching post details:', error);\r\n    });\r\n    axios.get(`http://localhost:3001/api/getComments/${postID}`)\r\n.then(response => {\r\n    this.comments = response.data;\r\n})\r\n.catch(error => {\r\n    console.error('Error fetching comments:', error);\r\n});\r\n},\r\n  methods: {\r\n    async addComment() {\r\n            const postID = this.postDetail.postID;\r\n            const loggedInUser = JSON.parse(localStorage.getItem('user'));\r\n            const userID = loggedInUser.id;\r\n\r\n            try {\r\n                const response = await axios.post('http://localhost:3001/api/addComment', {\r\n                    postID,\r\n                    userID,\r\n                    content: this.content // 변경된 부분\r\n                });\r\n\r\n                if (response.status === 201) {\r\n                    alert('댓글이 성공적으로 추가되었습니다.');\r\n                    this.content = ''; // 댓글 내용 초기화\r\n                }\r\n            } catch (error) {\r\n                console.error('댓글 추가 중 오류 발생:', error);\r\n                alert('댓글을 추가하는데 실패했습니다.');\r\n            }\r\n        },\r\n\r\n   \r\n    // 내 정보 페이지로 이동\r\n    goToMyInfoPage() {\r\n      this.$router.push(\"/MyInfoPage\");\r\n    },\r\n\r\n    goToLoginPage() {\r\n      this.$router.push(\"/\");\r\n    },\r\n\r\n    // 매칭 신청 페이지로 이동\r\n    goToMatchingApplyPage() {\r\n      this.$router.push(\"/MatchingApplyPage\");\r\n    },\r\n\r\n    // 매칭 현황 페이지로 이동\r\n    goToMatchingStatusPage() {\r\n      this.$router.push(\"/MatchingApplyDetailPage\");\r\n    },\r\n\r\n    goToMainPage() {\r\n      this.$router.push(\"/MainPage\");\r\n    },\r\n\r\n    goToNoticePage() {\r\n      this.$router.push(\"/NoticePage\");\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nbody {\r\n    margin: 0;\r\n    background-color: white;\r\n}\r\n\r\n.MatchingUs {\r\n    font-size: 24px; /* 로고 사이즈를 24px로 조정 */\r\n    color: #9370DB;\r\n}\r\n\r\ntextarea {\r\n resize: none;\r\n}\r\n\r\n.navbar {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    background-color: #F6E6F6;\r\n    padding: 8px 12px;\r\n}\r\n\r\n.navbar_logo {\r\n    font-size: 24px;\r\n}\r\n\r\n.navbar_logo .logo_image {\r\n    margin-right: 8px; \r\n}\r\n\r\n.navbar_welcome {\r\n    display: flex;\r\n    align-items: center;\r\n    margin-right: 30px; \r\n    margin-top: 10px;\r\n    font-weight: 400;\r\n}\r\n\r\n.navbar_welcome .welcome {\r\n    color: #9370DB;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.btn.btn-outline-success {\r\n    /* color: #9370DB; */\r\n    border-color: #9370DB; \r\n    font-weight: 500;\r\n}\r\n\r\n.navbar_right {\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n.navbar_right .btn {\r\n    margin-left: auto;\r\n    background-color: #F6E6F6; /* Set the background color to match the navbar background color */\r\n/* Set the border color to match the text color */\r\n}\r\n\r\n.navbar_right .btn a {\r\n/* Set the text color of the button */\r\n    text-decoration: none;\r\n}\r\n\r\n.navbar_right .btn:hover {\r\n    transform: scale(1.05);\r\n}\r\n\r\n\r\n\r\n/* 사이드 메뉴 바 */\r\n.side_nav {\r\n    width: 200px;\r\n    height: 100%;\r\n    position: fixed;\r\n    background-color:#E0E0E0; /* 회색으로 변경 */\r\n    padding: 20px;\r\n}\r\n\r\n.basicMenu {\r\n    list-style: none;\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\n\r\n.basicMenu button {\r\n    background: none;\r\n    border: none;\r\n    cursor: pointer;\r\n    padding: 10px;\r\n    margin-bottom: 10px;\r\n    width: 100%;\r\n    text-align: left;\r\n    color: white; /* 버튼 텍스트 색상 흰색으로 설정 */\r\n    font-size: 16px;\r\n    transition: background-color 0.3s; /* 호버 효과 추가 */\r\n}\r\n\r\n.basicMenu button:hover {\r\n    background-color:#cccccc; /* 호버시 진한 회색으로 변경 */\r\n}\r\n\r\n.content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding-top: 100px;\r\n  padding-left: 350px;\r\n  margin: 20px 0;\r\n  border: none; /* 테두리 제거 */\r\n}\r\n\r\n/* 상세 정보 스타일 */\r\n\r\n.post-it.male {\r\n  background-color: #deeeff; /* Blue color for male */\r\n  font-family: 'gangwon', sans-serif;\r\n}\r\n\r\n.post-it.female {\r\n  background-color: #ffe4ee; /* Pink color for female */\r\n  font-family: 'gangwon', sans-serif;\r\n\r\n}\r\n.post-it {\r\n  width: 1000px;\r\n  height: 500px;\r\n  margin: 10px;\r\n  padding: 10px;\r\n\r\n\r\n  box-shadow: 2px 2px 5px #aaa;\r\n  background-color: #fefabc; /* Default yellow color for post-it */\r\n  transition: transform 0.2s; /* Animation for hover effect */\r\n  font-size: 25px;\r\n}\r\n\r\n\r\n\r\n/* 댓글 섹션 스타일 */\r\n\r\n.comment-ul {\r\n  list-style: none;\r\n  margin: none;\r\n  padding: 10px;\r\n}\r\n\r\n.comment-ul li {\r\n  margin-bottom: 10px; /* 댓글 간격을 조정 */\r\n  \r\n}\r\n\r\n.comment-button {\r\n  width: 70px;\r\n  \r\n}\r\n\r\n.comments-section {\r\n  width: 1000px;\r\n  border: 1px solid #eee;\r\n  border-radius: 5px;\r\n  margin: 10px;\r\n  margin-top: 30px;\r\n  padding: 10px;\r\n  \r\n}\r\n\r\n\r\n.add-comment {\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-top: 20px;\r\n  \r\n}\r\n\r\n.textarea-wrapper {\r\n  position: relative;\r\n  \r\n}\r\n\r\n.add-comment textarea {\r\n  width: 100%;\r\n  padding: 10px;\r\n  border: 1px solid #eee;\r\n  border-radius: 5px;\r\n  margin-bottom: 10px;\r\n  resize: vertical;\r\n  border: 1px solid #F6E6F6;\r\n}\r\n\r\n.add-comment textarea:focus {\r\n  border: 1px solid #F6E6F6;/* 클릭시에 변경할 border 색상 설정 */\r\n}\r\n\r\n.add-comment button {\r\n  width: auto; /* Button width takes up available space */\r\n  background-color: #F6E6F6;\r\n  color: #9370DB;\r\n  border: 1px solid #9370DB;\r\n  padding: 7px;\r\n  border-radius: 15px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  transition: background-color 0.3s;\r\n  align-self: flex-end;\r\n}\r\n\r\n.add-comment button:hover {\r\n  background-color: #9370DB;\r\n  color: white;\r\n}\r\n\r\n.warning-text {\r\n  color: red;\r\n  font-size: 15px;\r\n  margin-top: 10px;\r\n  font-weight: bold;\r\n}\r\n/* 반응형 레이아웃 (사이드바가 사라지는 화면 크기 이하) */\r\n@media (max-width: 768px) { /* 예시: 768px 이하의 화면 크기에서 적용 */\r\n    .content {\r\n        margin-left: 20px; /* 사이드바가 사라지면 좌측 마진을 줄임 */\r\n    }\r\n    \r\n    .side_nav {\r\n        display: none; /* 사이드바를 숨김 */\r\n    }\r\n}\r\n\r\n@font-face {\r\n  font-family: 'gangwon';\r\n  src:url(../../public/fonts/강원교육현옥샘.ttf)\r\n}\r\n\r\n@import \"~bootstrap/dist/css/bootstrap.min.css\";\r\n@import \"~@fortawesome/fontawesome-free/css/all.min.css\";\r\n</style>"],"mappings":";AAgFA,OAAOA,KAAI,MAAO,OAAO;AACzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACP,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE,CAAC,CAAC;MACdC,OAAO,EAAE,EAAE;MACXC,cAAc,EAAE;IAClB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACN,MAAMC,MAAK,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACF,MAAM;IACxCP,KAAK,CAACU,GAAG,CAAE,2CAA0CH,MAAO,EAAC,EAC5DI,IAAI,CAACC,QAAO,IAAK;MACd,IAAI,CAACT,UAAS,GAAIS,QAAQ,CAACX,IAAI;IACnC,CAAC,EACAY,KAAK,CAACC,KAAI,IAAK;MACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACxD,CAAC,CAAC;IACFd,KAAK,CAACU,GAAG,CAAE,yCAAwCH,MAAO,EAAC,EAC9DI,IAAI,CAACC,QAAO,IAAK;MACd,IAAI,CAACV,QAAO,GAAIU,QAAQ,CAACX,IAAI;IACjC,CAAC,EACAY,KAAK,CAACC,KAAI,IAAK;MACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IACpD,CAAC,CAAC;EACF,CAAC;EACCE,OAAO,EAAE;IACP,MAAMC,UAAUA,CAAA,EAAG;MACX,MAAMV,MAAK,GAAI,IAAI,CAACJ,UAAU,CAACI,MAAM;MACrC,MAAMW,YAAW,GAAIC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;MAC7D,MAAMC,MAAK,GAAIL,YAAY,CAACM,EAAE;MAE9B,IAAI;QACA,MAAMZ,QAAO,GAAI,MAAMZ,KAAK,CAACyB,IAAI,CAAC,sCAAsC,EAAE;UACtElB,MAAM;UACNgB,MAAM;UACNnB,OAAO,EAAE,IAAI,CAACA,OAAM,CAAE;QAC1B,CAAC,CAAC;;QAEF,IAAIQ,QAAQ,CAACc,MAAK,KAAM,GAAG,EAAE;UACzBC,KAAK,CAAC,oBAAoB,CAAC;UAC3B,IAAI,CAACvB,OAAM,GAAI,EAAE,EAAE;QACvB;MACJ,EAAE,OAAOU,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;QACtCa,KAAK,CAAC,mBAAmB,CAAC;MAC9B;IACJ,CAAC;IAGL;IACAC,cAAcA,CAAA,EAAG;MACf,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,aAAa,CAAC;IAClC,CAAC;IAEDC,aAAaA,CAAA,EAAG;MACd,IAAI,CAACF,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC;IACxB,CAAC;IAED;IACAE,qBAAqBA,CAAA,EAAG;MACtB,IAAI,CAACH,OAAO,CAACC,IAAI,CAAC,oBAAoB,CAAC;IACzC,CAAC;IAED;IACAG,sBAAsBA,CAAA,EAAG;MACvB,IAAI,CAACJ,OAAO,CAACC,IAAI,CAAC,0BAA0B,CAAC;IAC/C,CAAC;IAEDI,YAAYA,CAAA,EAAG;MACb,IAAI,CAACL,OAAO,CAACC,IAAI,CAAC,WAAW,CAAC;IAChC,CAAC;IAEDK,cAAcA,CAAA,EAAG;MACf,IAAI,CAACN,OAAO,CAACC,IAAI,CAAC,aAAa,CAAC;IAClC;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}